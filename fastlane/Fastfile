lane :ensure_release_version do |options|
  ensure_git_flow_init()
  prepare_lane_options(
    options: options,
    mapping: {
      :project => {:env_var => "DG_PROJECT"}
    }
  )
  prefix_versiontag = Actions.sh("git config --get gitflow.prefix.versiontag").strip()
  current_version = get_version_number(
    xcodeproj: options[:project]
  )
  build_number = get_build_number(
    xcodeproj: options[:project]
  )
  version = current_version
  while git_tag_exists(tag: "#{prefix_versiontag}#{version}") do
    UI.error "The version '#{version}' exists, you must update the version"
    bump_type = UI.select("Select version bump type: ", ["patch", "minor", "major"])
    version = increment_version_number(
      xcodeproj: options[:project],
      bump_type: bump_type
    )
    build_number = increment_build_number(
      xcodeproj: options[:project],
      build_number: "1"
    )
  end
  if version != current_version
    git_commit(
      path: ["."],
      message: "Bumped release version to '#{version}'"
    )
  end
  UI.success "Release version #{version} ready"
  lane_context[:DG_RELEASE_VERSION] = version
  lane_context[:DG_BUILD_NUMBER] = build_number
end

lane :ensure_beta_version do |options|
  ensure_git_flow_init()
  prepare_lane_options(
    options: options,
    mapping: {
      :project => {:env_var => "DG_PROJECT"}
    }
  )
  version = get_version_number(
    xcodeproj: options[:project]
  )
  current_build_number = get_build_number(
    xcodeproj: options[:project]
  )
  build_number = current_build_number
  while git_tag_exists(tag: get_beta_tag(version: version, build_number: build_number)) do
    UI.error "The version '#{version}' beta ##{build_number} exists, you must update the build number"
    bump_type = UI.input("Set the build number [auto-increment] ")
    next_number = bump_type.length == 0 ? nil : bump_type
    build_number = increment_build_number(
      xcodeproj: options[:project],
      build_number: next_number
    )
  end
  if build_number != current_build_number
    git_commit(
      path: ["."],
      message: "Bumped build number to ##{build_number}"
    )
  end
  UI.success "Beta version '#{version}' beta ##{build_number} ready"
  lane_context[:DG_BETA_VERSION] = version
  lane_context[:DG_BUILD_NUMBER] = build_number
end

lane :publish_app_beta do |options|
  ensure_git_status_clean()
  ensure_git_flow_init()
  develop_branch = Actions.sh("git config --get gitflow.branch.develop", log: false).strip()
  beta_branch = get_beta_branch()
  if git_branch_exists(branch: beta_branch)
    Actions.sh("git checkout #{beta_branch}")
    Actions.sh("git merge #{develop_branch}")
  else
    Actions.sh("git checkout -b #{beta_branch} #{develop_branch}")
  end
  ensure_release_version()
  ensure_beta_version()
  version = lane_context[:DG_BETA_VERSION]
  build_number = lane_context[:DG_BUILD_NUMBER]
  if !UI.confirm("Are you sure to submit beta version '#{version}' build ##{build_number} ?")
    UI.user_error! "User abort beta version"
  end
  add_git_tag(
    tag: get_beta_tag(version: version, build_number: build_number)
  )
  push_to_git_remote()
  Actions.sh("git checkout #{develop_branch}")
  Actions.sh("git merge #{beta_branch}")
  push_to_git_remote()
end
