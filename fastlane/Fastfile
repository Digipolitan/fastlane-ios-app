lane :select_new_release_version do |options|
  prepare_lane_options(
    options: options,
    required_keys: [
      :current_version_number
    ]
  )
  version_number = options[:current_version_number]
  UI.error "You must update your version '#{version_number}'"
  bump_type = UI.select("Select version bump type: ", ["patch", "minor", "major"])
  lane_context[:VERSION_NUMBER] = get_next_version_number(
    version_number: version_number,
    bump_type: bump_type
  )
  lane_context[:BUILD_NUMBER] = "1"
end

lane :select_new_build_number do |options|
  prepare_lane_options(
    options: options,
    required_keys: [
      :current_build_number
    ]
  )
  build_number = options[:current_build_number]
  UI.error "You must update your build number ##{build_number}"
  bump_type = UI.input("Set the build number [auto-increment] ")
  if bump_type.length == 0
    build_number = get_next_build_number(build_number: build_number)
  else
    build_number = bump_type
  end
  lane_context[:BUILD_NUMBER] = build_number
end

lane :ensure_release_version do |options|
  ensure_git_flow_init()
  prepare_lane_options(
    options: options,
    mapping: {
      :prefix_versiontag => {:lane_context => SharedValues::GIT_FLOW_VERSIONTAG_PREFIX},
    },
    required_keys: [
      :current_version_number,
      :current_build_number
    ]
  )
  prefix_versiontag = options[:prefix_versiontag]
  version_number = options[:current_version_number]
  build_number = options[:current_build_number]
  while git_tag_exists(tag: "#{prefix_versiontag}#{version_number}") do
    select_new_release_version(current_version_number: version_number)
    version_number = lane_context[:VERSION_NUMBER];
    build_number = lane_context[:BUILD_NUMBER];
  end
  while git_tag_exists(tag: "#{prefix_versiontag}#{version_number}##{build_number}") do
    select_new_build_number(current_build_number: build_number)
    build_number = lane_context[:BUILD_NUMBER];
  end
  UI.success "Release version '#{version_number}' build ##{build_number} ready"
  lane_context[:VERSION_NUMBER] = version_number
  lane_context[:BUILD_NUMBER] = build_number
  lane_context[:DG_RELEASE_TAG] = "#{prefix_versiontag}#{version_number}"
  lane_context[:DG_BUILD_TAG] = "#{prefix_versiontag}#{version_number}##{build_number}"
end

lane :start_app_release do |options|
  ensure_git_status_clean()
  ensure_git_flow_init()
  prepare_lane_options(
    options: options,
    mapping: {
      :project => {:env_var => "DG_PROJECT"},
      :develop_branch => {:lane_context => SharedValues::GIT_FLOW_DEVELOP_BRANCH},
    }
  )
  project = options[:project];
  current_version_number = get_version_number(xcodeproj: project)
  current_build_number = get_build_number(xcodeproj: project)
  ensure_release_version(
    current_version_number: current_version_number,
    current_build_number: current_build_number
  )
  release_version_number = lane_context[:VERSION_NUMBER]
  build_number = lane_context[:BUILD_NUMBER]
  if !UI.confirm("Are you sure to submit version '#{release_version_number}' build ##{build_number} ?")
    UI.user_error! "User abort version"
  end
  git_flow_release(
    action: "start",
    name: release_version_number
  )
  if current_version_number != release_version_number || current_build_number != build_number
    increment_version_number(
      xcodeproj: project,
      version_number: release_version_number
    )
    increment_build_number(
      xcodeproj: project,
      build_number: build_number
    )
    git_commit(
      path: ["."],
      message: "Bumped release version '#{release_version_number}' build ##{build_number}"
    )
  end
  add_git_tag(
    tag: lane_context[:DG_BUILD_TAG]
  )
  push_to_git_remote()
  release_branch = git_branch()
  develop_branch = options[:develop_branch]
  Actions.sh("git checkout #{develop_branch}")
  Actions.sh("git merge #{release_branch}")
  push_to_git_remote()
end
